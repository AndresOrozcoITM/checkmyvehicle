version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: checkmyvehicle_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: checkmyvehicle
    ports:
      - '3306:3306'
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db_data:/var/lib/mysql
    networks: # <-- Asignar a nuestra red
      - checkmyvehicle-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: checkmyvehicle_backend
    restart: unless-stopped
    ports:
      - '5000:5000'
    env_file:
      - ./backend/.env
    depends_on:
      - db
    networks: # <-- Asignar a nuestra red
      - checkmyvehicle-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: checkmyvehicle_frontend
    restart: unless-stopped
    ports:
      - '3000:80'
    depends_on:
      - backend
    networks: # <-- Asignar a nuestra red
      - checkmyvehicle-net

# Definimos la red que vamos a usar
networks:
  checkmyvehicle-net:
    driver: bridge
    driver_opts: # <-- Opciones para el driver de red
      com.docker.network.driver.mtu: 1400 # Ayuda con problemas de fragmentaciÃ³n de paquetes en VPNs/redes complejas
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
    external: true # Indicamos que esta red fue creada fuera de este compose

volumes:
  db_data: